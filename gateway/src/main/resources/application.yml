server:
  port: 8089
spring:
  application:
    name: api-gateway
  cloud:
    # gataway配置
    gateway:
      # 跨域配置,也可以采用配置类的方式，详见pdf文档
      globalcors:
        cors-configurations:
          '[/**]': # 允许跨域访问的资源
            allowedOrigins: "*"  # 跨域允许来源
            allowedMethods:
              - GET
              - POST
      #路由规则
      routes:
        - id: order_route  #路由唯一标识，路由到order服务
          uri: lb://order-service #需要转发的地址 lb代表gateway调用到order时会采用nacos本地的负载均衡策略，均匀的去请求nacos的多台服务器
          #断言规则 用于路由规则的匹配
          predicates:
            - Path=/order/**
            # http://localhost:8089/order-serv/order/add
            # 根据nacos服务自动找到order-service的ip
            # 对应为http://localhost:8020/order-serv/order/add
            #- After=2023-07-06T21:04:05.049+08:00[Asia/Shanghai]
            #- Header=X-Request-Id,\d+
            #- CheckAuth=xushu
          filters:
            # - PrefixPath=/mall-order #添加前缀，对应微服务需要配置context-path
            # - CheckAuth=xushu #，自定义过滤器，请求需要携带参数名为name,值为xushu,否则返回404
            #- StripPrefix=1  #转发之前去掉第一层路径
            # - AddRequestHeader=X-Request-color, red
            # - AddRequestParameter=color, blue
            # 加了这个前缀后，网关层去访问还是访问localhost://8089/order/add
            # 到具体的微服务层会加上/mall-order的前缀，也就是localhost:8020/mall-order/order/add
            #- RedirectTo=302, http://www.baidu.com/ # 重定向到百度
            # http://localhost:8020/order/add 才是真正的order服务的请求地址

    nacos:
      discovery:
        server-addr: 127.0.0.1:8848
        username: nacos
        password: nacos
    sentinel:
      transport:
        # java -Dserver.port=8858 -Dsentinel.dashboard.auth.username=csc -Dsentinel.dashboard.auth.password=123456 -jar sentinel-dashboard-1.8.0.jar
        # 可以在启动时修改端口，用户名和密码
        # 因为sentinel默认端口是在8080，太容易冲突
        dashboard: 127.0.0.1:8858


